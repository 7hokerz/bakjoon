배낭 문제를 풀 때 필요한 것들

1. 반드시 성립해야 하는 조건: 배낭 문제는 "정해진 범위 내(무게)를 넘지 않는 선에서 최댓값(가치)"를 구해야 한다.

하지만 이 중에서 하나도 성립되지 않는 경우가 있다면 그때는 기준을 분명히 다른 것으로 바꿔야 한다.

예시로 7579번 문제 최소 M바이트를 만족하는 경우 중 비용의 최솟값을 구하시오. 

기존 문제처럼 바이트 = 무게, 비용 = 최대 가치로 보고 풀 수도 있으나 그러면 안된다.
기준을 바꿔보면, 무게 = 비용, 바이트 = 최대 가치

그러면 어떻게 되는가? 어떠한 비용의 값만 쓰면서 최대 바이트 값을 알 수 있게 된다. 
dp에 바이트 값이 저장되고, 최대 바이트 값이 M 이상이면서 최소 비용인 경우로 구할 수 있다.


2. 기본 식
dp에 최대 가치를 저장한다고 할 때(pos: 물품의 번호, weight: 최대 무게)

if 넣을 수 있으면 dp[pos][weight] = max(dp[pos-1][weight], 해당 물품의 가치 + dp[pos-1][weight - 해당 물품의 무게])(현재 물품을 넣지 않는 경우, 넣는 경우)

else 넣을 수 없으면 dp[pos][weight] = dp[pos-1][weight]

중요한 것은 물품을 계속 순회할 수록 최대 가치가 증가한다는 점이다.
이유는 물품에 따라 경우의 수가 점점 증가하므로 계속 최대 가치가 되는 값을 dp에 저장되기 때문이다.


1 - 물품이 중복 가능한 경우(1차원 배열로 표현)(사실 1차원 배열로 표현해도 상관없다.)

for(int i = 해당 물품의 무게;i<최대 무게;i++)
dp[weight] = max(dp[weight], 해당 물품의 가치 + dp[weight - 해당 물품의 무게])

2 - 물품이 중복 불가능한 경우
for(int i = 최대 무게;i>=해당 물품의 무게;i--)
dp[weight] = max(dp[weight], 해당 물품의 가치 + dp[weight - 해당 물품의 무게])

중복 불가능한 경우는 같은 식을 뒤에서 부터 순회하면 dp[weight - 해당 물품의 무게]가 채워지기 전에 참조하므로 중복을 피할 수 있다.


3. 최대 무게가 다른 배낭이 여러 개 주어진다면?
물품이 같으면 dp에 저장되는 최대 가치는 같다. 따라서 최대 무게가 큰 경우를 기준으로 dp를 구하고,
dp[각각의 최대 무게]에 따라서 각각의 최대 가치를 구할 수 있다.
**즉, 배낭의 개수 만큼 순회를 돌 필요가 없다.


4. 무게로 둘 수 있는 기준이 2개 이상이라면?(17208)
물품에 따른 가치를 보고 판단할 수 있다. 문제와 같이 주문의 가치가 1로 모두 동일하면
vt에 버거, 튀김으로 담은 후 dp 2차원 배열을 만들어서

for(int i = M;i>=vt[pos-1].first;i--)
    for(int j = K;j>=vt[pos-1].second;j--)
        dp[i][j] = max(dp[i][j], 1+dp[i-vt[pos-1].first][j-vt[pos-1].second]);

다른 배낭문제처럼 해결할 수 있다. 주문이 중복되지 않는다는 점으로 보아 뒤에서부터 순회하는 방식이 편했다. 

가치가 동일하지 않다면 vt에도 추가로 가치를 저장하고, 1로 되어있는 부분을 
vt[pos-1].second로 바꿔야겠지...(first.first=버거, first.second=튀김 으로 둔다면)


5. N개 중 K개를 뽑아? 모든 값의 합이 H여야?
그 기준을 깊게 파고들 필요 없다. 결국은 기준을 몇 개를 뽑은 것, 값이 H인 것을 기준으로 하면 상관 없다.
값이 H인거?
        1~H
물품    가치
번호

이렇게 하면 H일 때 만족하는 경우에 대한 가치가 나온다.
    

위의 표로 짜면 된다. 가치는 문제에 따라 누적될 수도 있고, 단순 값을 비교해 최댓값을 놓는 방식 등...일 수도 있으니 주의

설명이 부실할 수 있으나 문제를 직접 보면서 부딫혀보면 이해가 된다.




